// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { CurrencyType } from "../common.sol";

struct ShopData {
  uint256 restockInterval;
  uint256 lastRestock;
  CurrencyType discountCurrencyType;
  uint256 discountPercentage;
  address discountCurrencyAddress;
  uint256[] itemsForSale;
  uint256[] stocks;
  uint256[] defaultPrices;
  uint256[] paymentCurrencyTypes;
}

library Shop {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "Shop", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462617070000000000000000000000053686f70000000000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0075050420200120140000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint256)
  Schema constant _keySchema = Schema.wrap(0x002001001f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint8, uint256, address, uint256[], uint256[], uint256[], uint256[])
  Schema constant _valueSchema = Schema.wrap(0x007505041f1f001f618181818100000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "id";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](9);
    fieldNames[0] = "restockInterval";
    fieldNames[1] = "lastRestock";
    fieldNames[2] = "discountCurrencyType";
    fieldNames[3] = "discountPercentage";
    fieldNames[4] = "discountCurrencyAddress";
    fieldNames[5] = "itemsForSale";
    fieldNames[6] = "stocks";
    fieldNames[7] = "defaultPrices";
    fieldNames[8] = "paymentCurrencyTypes";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get restockInterval.
   */
  function getRestockInterval(uint256 id) internal view returns (uint256 restockInterval) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get restockInterval.
   */
  function _getRestockInterval(uint256 id) internal view returns (uint256 restockInterval) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set restockInterval.
   */
  function setRestockInterval(uint256 id, uint256 restockInterval) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((restockInterval)), _fieldLayout);
  }

  /**
   * @notice Set restockInterval.
   */
  function _setRestockInterval(uint256 id, uint256 restockInterval) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((restockInterval)), _fieldLayout);
  }

  /**
   * @notice Get lastRestock.
   */
  function getLastRestock(uint256 id) internal view returns (uint256 lastRestock) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get lastRestock.
   */
  function _getLastRestock(uint256 id) internal view returns (uint256 lastRestock) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set lastRestock.
   */
  function setLastRestock(uint256 id, uint256 lastRestock) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((lastRestock)), _fieldLayout);
  }

  /**
   * @notice Set lastRestock.
   */
  function _setLastRestock(uint256 id, uint256 lastRestock) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((lastRestock)), _fieldLayout);
  }

  /**
   * @notice Get discountCurrencyType.
   */
  function getDiscountCurrencyType(uint256 id) internal view returns (CurrencyType discountCurrencyType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return CurrencyType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get discountCurrencyType.
   */
  function _getDiscountCurrencyType(uint256 id) internal view returns (CurrencyType discountCurrencyType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return CurrencyType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set discountCurrencyType.
   */
  function setDiscountCurrencyType(uint256 id, CurrencyType discountCurrencyType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(discountCurrencyType)), _fieldLayout);
  }

  /**
   * @notice Set discountCurrencyType.
   */
  function _setDiscountCurrencyType(uint256 id, CurrencyType discountCurrencyType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(discountCurrencyType)), _fieldLayout);
  }

  /**
   * @notice Get discountPercentage.
   */
  function getDiscountPercentage(uint256 id) internal view returns (uint256 discountPercentage) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get discountPercentage.
   */
  function _getDiscountPercentage(uint256 id) internal view returns (uint256 discountPercentage) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set discountPercentage.
   */
  function setDiscountPercentage(uint256 id, uint256 discountPercentage) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((discountPercentage)), _fieldLayout);
  }

  /**
   * @notice Set discountPercentage.
   */
  function _setDiscountPercentage(uint256 id, uint256 discountPercentage) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((discountPercentage)), _fieldLayout);
  }

  /**
   * @notice Get discountCurrencyAddress.
   */
  function getDiscountCurrencyAddress(uint256 id) internal view returns (address discountCurrencyAddress) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get discountCurrencyAddress.
   */
  function _getDiscountCurrencyAddress(uint256 id) internal view returns (address discountCurrencyAddress) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set discountCurrencyAddress.
   */
  function setDiscountCurrencyAddress(uint256 id, address discountCurrencyAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((discountCurrencyAddress)), _fieldLayout);
  }

  /**
   * @notice Set discountCurrencyAddress.
   */
  function _setDiscountCurrencyAddress(uint256 id, address discountCurrencyAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((discountCurrencyAddress)), _fieldLayout);
  }

  /**
   * @notice Get itemsForSale.
   */
  function getItemsForSale(uint256 id) internal view returns (uint256[] memory itemsForSale) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Get itemsForSale.
   */
  function _getItemsForSale(uint256 id) internal view returns (uint256[] memory itemsForSale) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Set itemsForSale.
   */
  function setItemsForSale(uint256 id, uint256[] memory itemsForSale) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((itemsForSale)));
  }

  /**
   * @notice Set itemsForSale.
   */
  function _setItemsForSale(uint256 id, uint256[] memory itemsForSale) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((itemsForSale)));
  }

  /**
   * @notice Get the length of itemsForSale.
   */
  function lengthItemsForSale(uint256 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get the length of itemsForSale.
   */
  function _lengthItemsForSale(uint256 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get an item of itemsForSale.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemItemsForSale(uint256 id, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Get an item of itemsForSale.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemItemsForSale(uint256 id, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Push an element to itemsForSale.
   */
  function pushItemsForSale(uint256 id, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to itemsForSale.
   */
  function _pushItemsForSale(uint256 id, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from itemsForSale.
   */
  function popItemsForSale(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 32);
  }

  /**
   * @notice Pop an element from itemsForSale.
   */
  function _popItemsForSale(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 32);
  }

  /**
   * @notice Update an element of itemsForSale at `_index`.
   */
  function updateItemsForSale(uint256 id, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of itemsForSale at `_index`.
   */
  function _updateItemsForSale(uint256 id, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get stocks.
   */
  function getStocks(uint256 id) internal view returns (uint256[] memory stocks) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Get stocks.
   */
  function _getStocks(uint256 id) internal view returns (uint256[] memory stocks) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Set stocks.
   */
  function setStocks(uint256 id, uint256[] memory stocks) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((stocks)));
  }

  /**
   * @notice Set stocks.
   */
  function _setStocks(uint256 id, uint256[] memory stocks) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((stocks)));
  }

  /**
   * @notice Get the length of stocks.
   */
  function lengthStocks(uint256 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get the length of stocks.
   */
  function _lengthStocks(uint256 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get an item of stocks.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemStocks(uint256 id, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Get an item of stocks.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemStocks(uint256 id, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Push an element to stocks.
   */
  function pushStocks(uint256 id, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to stocks.
   */
  function _pushStocks(uint256 id, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from stocks.
   */
  function popStocks(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 1, 32);
  }

  /**
   * @notice Pop an element from stocks.
   */
  function _popStocks(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 1, 32);
  }

  /**
   * @notice Update an element of stocks at `_index`.
   */
  function updateStocks(uint256 id, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of stocks at `_index`.
   */
  function _updateStocks(uint256 id, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get defaultPrices.
   */
  function getDefaultPrices(uint256 id) internal view returns (uint256[] memory defaultPrices) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 2);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Get defaultPrices.
   */
  function _getDefaultPrices(uint256 id) internal view returns (uint256[] memory defaultPrices) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 2);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Set defaultPrices.
   */
  function setDefaultPrices(uint256 id, uint256[] memory defaultPrices) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 2, EncodeArray.encode((defaultPrices)));
  }

  /**
   * @notice Set defaultPrices.
   */
  function _setDefaultPrices(uint256 id, uint256[] memory defaultPrices) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setDynamicField(_tableId, _keyTuple, 2, EncodeArray.encode((defaultPrices)));
  }

  /**
   * @notice Get the length of defaultPrices.
   */
  function lengthDefaultPrices(uint256 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 2);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get the length of defaultPrices.
   */
  function _lengthDefaultPrices(uint256 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 2);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get an item of defaultPrices.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemDefaultPrices(uint256 id, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 2, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Get an item of defaultPrices.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemDefaultPrices(uint256 id, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 2, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Push an element to defaultPrices.
   */
  function pushDefaultPrices(uint256 id, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 2, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to defaultPrices.
   */
  function _pushDefaultPrices(uint256 id, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 2, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from defaultPrices.
   */
  function popDefaultPrices(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 2, 32);
  }

  /**
   * @notice Pop an element from defaultPrices.
   */
  function _popDefaultPrices(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 2, 32);
  }

  /**
   * @notice Update an element of defaultPrices at `_index`.
   */
  function updateDefaultPrices(uint256 id, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 2, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of defaultPrices at `_index`.
   */
  function _updateDefaultPrices(uint256 id, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 2, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get paymentCurrencyTypes.
   */
  function getPaymentCurrencyTypes(uint256 id) internal view returns (uint256[] memory paymentCurrencyTypes) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 3);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Get paymentCurrencyTypes.
   */
  function _getPaymentCurrencyTypes(uint256 id) internal view returns (uint256[] memory paymentCurrencyTypes) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 3);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Set paymentCurrencyTypes.
   */
  function setPaymentCurrencyTypes(uint256 id, uint256[] memory paymentCurrencyTypes) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 3, EncodeArray.encode((paymentCurrencyTypes)));
  }

  /**
   * @notice Set paymentCurrencyTypes.
   */
  function _setPaymentCurrencyTypes(uint256 id, uint256[] memory paymentCurrencyTypes) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setDynamicField(_tableId, _keyTuple, 3, EncodeArray.encode((paymentCurrencyTypes)));
  }

  /**
   * @notice Get the length of paymentCurrencyTypes.
   */
  function lengthPaymentCurrencyTypes(uint256 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 3);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get the length of paymentCurrencyTypes.
   */
  function _lengthPaymentCurrencyTypes(uint256 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 3);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get an item of paymentCurrencyTypes.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemPaymentCurrencyTypes(uint256 id, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 3, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Get an item of paymentCurrencyTypes.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemPaymentCurrencyTypes(uint256 id, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 3, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Push an element to paymentCurrencyTypes.
   */
  function pushPaymentCurrencyTypes(uint256 id, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 3, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to paymentCurrencyTypes.
   */
  function _pushPaymentCurrencyTypes(uint256 id, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 3, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from paymentCurrencyTypes.
   */
  function popPaymentCurrencyTypes(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 3, 32);
  }

  /**
   * @notice Pop an element from paymentCurrencyTypes.
   */
  function _popPaymentCurrencyTypes(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 3, 32);
  }

  /**
   * @notice Update an element of paymentCurrencyTypes at `_index`.
   */
  function updatePaymentCurrencyTypes(uint256 id, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 3, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of paymentCurrencyTypes at `_index`.
   */
  function _updatePaymentCurrencyTypes(uint256 id, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 3, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(uint256 id) internal view returns (ShopData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint256 id) internal view returns (ShopData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 id,
    uint256 restockInterval,
    uint256 lastRestock,
    CurrencyType discountCurrencyType,
    uint256 discountPercentage,
    address discountCurrencyAddress,
    uint256[] memory itemsForSale,
    uint256[] memory stocks,
    uint256[] memory defaultPrices,
    uint256[] memory paymentCurrencyTypes
  ) internal {
    bytes memory _staticData = encodeStatic(
      restockInterval,
      lastRestock,
      discountCurrencyType,
      discountPercentage,
      discountCurrencyAddress
    );

    EncodedLengths _encodedLengths = encodeLengths(itemsForSale, stocks, defaultPrices, paymentCurrencyTypes);
    bytes memory _dynamicData = encodeDynamic(itemsForSale, stocks, defaultPrices, paymentCurrencyTypes);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 id,
    uint256 restockInterval,
    uint256 lastRestock,
    CurrencyType discountCurrencyType,
    uint256 discountPercentage,
    address discountCurrencyAddress,
    uint256[] memory itemsForSale,
    uint256[] memory stocks,
    uint256[] memory defaultPrices,
    uint256[] memory paymentCurrencyTypes
  ) internal {
    bytes memory _staticData = encodeStatic(
      restockInterval,
      lastRestock,
      discountCurrencyType,
      discountPercentage,
      discountCurrencyAddress
    );

    EncodedLengths _encodedLengths = encodeLengths(itemsForSale, stocks, defaultPrices, paymentCurrencyTypes);
    bytes memory _dynamicData = encodeDynamic(itemsForSale, stocks, defaultPrices, paymentCurrencyTypes);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint256 id, ShopData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.restockInterval,
      _table.lastRestock,
      _table.discountCurrencyType,
      _table.discountPercentage,
      _table.discountCurrencyAddress
    );

    EncodedLengths _encodedLengths = encodeLengths(
      _table.itemsForSale,
      _table.stocks,
      _table.defaultPrices,
      _table.paymentCurrencyTypes
    );
    bytes memory _dynamicData = encodeDynamic(
      _table.itemsForSale,
      _table.stocks,
      _table.defaultPrices,
      _table.paymentCurrencyTypes
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint256 id, ShopData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.restockInterval,
      _table.lastRestock,
      _table.discountCurrencyType,
      _table.discountPercentage,
      _table.discountCurrencyAddress
    );

    EncodedLengths _encodedLengths = encodeLengths(
      _table.itemsForSale,
      _table.stocks,
      _table.defaultPrices,
      _table.paymentCurrencyTypes
    );
    bytes memory _dynamicData = encodeDynamic(
      _table.itemsForSale,
      _table.stocks,
      _table.defaultPrices,
      _table.paymentCurrencyTypes
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint256 restockInterval,
      uint256 lastRestock,
      CurrencyType discountCurrencyType,
      uint256 discountPercentage,
      address discountCurrencyAddress
    )
  {
    restockInterval = (uint256(Bytes.getBytes32(_blob, 0)));

    lastRestock = (uint256(Bytes.getBytes32(_blob, 32)));

    discountCurrencyType = CurrencyType(uint8(Bytes.getBytes1(_blob, 64)));

    discountPercentage = (uint256(Bytes.getBytes32(_blob, 65)));

    discountCurrencyAddress = (address(Bytes.getBytes20(_blob, 97)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint256[] memory itemsForSale,
      uint256[] memory stocks,
      uint256[] memory defaultPrices,
      uint256[] memory paymentCurrencyTypes
    )
  {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    itemsForSale = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    stocks = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(2);
    }
    defaultPrices = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(3);
    }
    paymentCurrencyTypes = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (ShopData memory _table) {
    (
      _table.restockInterval,
      _table.lastRestock,
      _table.discountCurrencyType,
      _table.discountPercentage,
      _table.discountCurrencyAddress
    ) = decodeStatic(_staticData);

    (_table.itemsForSale, _table.stocks, _table.defaultPrices, _table.paymentCurrencyTypes) = decodeDynamic(
      _encodedLengths,
      _dynamicData
    );
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 restockInterval,
    uint256 lastRestock,
    CurrencyType discountCurrencyType,
    uint256 discountPercentage,
    address discountCurrencyAddress
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(restockInterval, lastRestock, discountCurrencyType, discountPercentage, discountCurrencyAddress);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    uint256[] memory itemsForSale,
    uint256[] memory stocks,
    uint256[] memory defaultPrices,
    uint256[] memory paymentCurrencyTypes
  ) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(
        itemsForSale.length * 32,
        stocks.length * 32,
        defaultPrices.length * 32,
        paymentCurrencyTypes.length * 32
      );
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(
    uint256[] memory itemsForSale,
    uint256[] memory stocks,
    uint256[] memory defaultPrices,
    uint256[] memory paymentCurrencyTypes
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        EncodeArray.encode((itemsForSale)),
        EncodeArray.encode((stocks)),
        EncodeArray.encode((defaultPrices)),
        EncodeArray.encode((paymentCurrencyTypes))
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 restockInterval,
    uint256 lastRestock,
    CurrencyType discountCurrencyType,
    uint256 discountPercentage,
    address discountCurrencyAddress,
    uint256[] memory itemsForSale,
    uint256[] memory stocks,
    uint256[] memory defaultPrices,
    uint256[] memory paymentCurrencyTypes
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      restockInterval,
      lastRestock,
      discountCurrencyType,
      discountPercentage,
      discountCurrencyAddress
    );

    EncodedLengths _encodedLengths = encodeLengths(itemsForSale, stocks, defaultPrices, paymentCurrencyTypes);
    bytes memory _dynamicData = encodeDynamic(itemsForSale, stocks, defaultPrices, paymentCurrencyTypes);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 id) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    return _keyTuple;
  }
}
