// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { EffectType, DurationType, TargetType } from "../common.sol";

struct ConsumableData {
  uint256 itemId;
  uint256 charges;
  uint256 maxCharges;
  uint256 duration;
  EffectType effect;
  DurationType durationType;
  TargetType targetType;
}

library Consumable {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "Consumable", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74626170700000000000000000000000436f6e73756d61626c65000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0083070020202020010101000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint256)
  Schema constant _keySchema = Schema.wrap(0x002001001f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, uint256, uint8, uint8, uint8)
  Schema constant _valueSchema = Schema.wrap(0x008307001f1f1f1f000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "id";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](7);
    fieldNames[0] = "itemId";
    fieldNames[1] = "charges";
    fieldNames[2] = "maxCharges";
    fieldNames[3] = "duration";
    fieldNames[4] = "effect";
    fieldNames[5] = "durationType";
    fieldNames[6] = "targetType";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get itemId.
   */
  function getItemId(uint256 id) internal view returns (uint256 itemId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get itemId.
   */
  function _getItemId(uint256 id) internal view returns (uint256 itemId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set itemId.
   */
  function setItemId(uint256 id, uint256 itemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((itemId)), _fieldLayout);
  }

  /**
   * @notice Set itemId.
   */
  function _setItemId(uint256 id, uint256 itemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((itemId)), _fieldLayout);
  }

  /**
   * @notice Get charges.
   */
  function getCharges(uint256 id) internal view returns (uint256 charges) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get charges.
   */
  function _getCharges(uint256 id) internal view returns (uint256 charges) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set charges.
   */
  function setCharges(uint256 id, uint256 charges) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((charges)), _fieldLayout);
  }

  /**
   * @notice Set charges.
   */
  function _setCharges(uint256 id, uint256 charges) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((charges)), _fieldLayout);
  }

  /**
   * @notice Get maxCharges.
   */
  function getMaxCharges(uint256 id) internal view returns (uint256 maxCharges) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get maxCharges.
   */
  function _getMaxCharges(uint256 id) internal view returns (uint256 maxCharges) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set maxCharges.
   */
  function setMaxCharges(uint256 id, uint256 maxCharges) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((maxCharges)), _fieldLayout);
  }

  /**
   * @notice Set maxCharges.
   */
  function _setMaxCharges(uint256 id, uint256 maxCharges) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((maxCharges)), _fieldLayout);
  }

  /**
   * @notice Get duration.
   */
  function getDuration(uint256 id) internal view returns (uint256 duration) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get duration.
   */
  function _getDuration(uint256 id) internal view returns (uint256 duration) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set duration.
   */
  function setDuration(uint256 id, uint256 duration) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((duration)), _fieldLayout);
  }

  /**
   * @notice Set duration.
   */
  function _setDuration(uint256 id, uint256 duration) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((duration)), _fieldLayout);
  }

  /**
   * @notice Get effect.
   */
  function getEffect(uint256 id) internal view returns (EffectType effect) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return EffectType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get effect.
   */
  function _getEffect(uint256 id) internal view returns (EffectType effect) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return EffectType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set effect.
   */
  function setEffect(uint256 id, EffectType effect) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked(uint8(effect)), _fieldLayout);
  }

  /**
   * @notice Set effect.
   */
  function _setEffect(uint256 id, EffectType effect) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked(uint8(effect)), _fieldLayout);
  }

  /**
   * @notice Get durationType.
   */
  function getDurationType(uint256 id) internal view returns (DurationType durationType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return DurationType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get durationType.
   */
  function _getDurationType(uint256 id) internal view returns (DurationType durationType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return DurationType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set durationType.
   */
  function setDurationType(uint256 id, DurationType durationType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked(uint8(durationType)), _fieldLayout);
  }

  /**
   * @notice Set durationType.
   */
  function _setDurationType(uint256 id, DurationType durationType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked(uint8(durationType)), _fieldLayout);
  }

  /**
   * @notice Get targetType.
   */
  function getTargetType(uint256 id) internal view returns (TargetType targetType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return TargetType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get targetType.
   */
  function _getTargetType(uint256 id) internal view returns (TargetType targetType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return TargetType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set targetType.
   */
  function setTargetType(uint256 id, TargetType targetType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked(uint8(targetType)), _fieldLayout);
  }

  /**
   * @notice Set targetType.
   */
  function _setTargetType(uint256 id, TargetType targetType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked(uint8(targetType)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(uint256 id) internal view returns (ConsumableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint256 id) internal view returns (ConsumableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 id,
    uint256 itemId,
    uint256 charges,
    uint256 maxCharges,
    uint256 duration,
    EffectType effect,
    DurationType durationType,
    TargetType targetType
  ) internal {
    bytes memory _staticData = encodeStatic(itemId, charges, maxCharges, duration, effect, durationType, targetType);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 id,
    uint256 itemId,
    uint256 charges,
    uint256 maxCharges,
    uint256 duration,
    EffectType effect,
    DurationType durationType,
    TargetType targetType
  ) internal {
    bytes memory _staticData = encodeStatic(itemId, charges, maxCharges, duration, effect, durationType, targetType);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint256 id, ConsumableData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.itemId,
      _table.charges,
      _table.maxCharges,
      _table.duration,
      _table.effect,
      _table.durationType,
      _table.targetType
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint256 id, ConsumableData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.itemId,
      _table.charges,
      _table.maxCharges,
      _table.duration,
      _table.effect,
      _table.durationType,
      _table.targetType
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint256 itemId,
      uint256 charges,
      uint256 maxCharges,
      uint256 duration,
      EffectType effect,
      DurationType durationType,
      TargetType targetType
    )
  {
    itemId = (uint256(Bytes.getBytes32(_blob, 0)));

    charges = (uint256(Bytes.getBytes32(_blob, 32)));

    maxCharges = (uint256(Bytes.getBytes32(_blob, 64)));

    duration = (uint256(Bytes.getBytes32(_blob, 96)));

    effect = EffectType(uint8(Bytes.getBytes1(_blob, 128)));

    durationType = DurationType(uint8(Bytes.getBytes1(_blob, 129)));

    targetType = TargetType(uint8(Bytes.getBytes1(_blob, 130)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (ConsumableData memory _table) {
    (
      _table.itemId,
      _table.charges,
      _table.maxCharges,
      _table.duration,
      _table.effect,
      _table.durationType,
      _table.targetType
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 itemId,
    uint256 charges,
    uint256 maxCharges,
    uint256 duration,
    EffectType effect,
    DurationType durationType,
    TargetType targetType
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(itemId, charges, maxCharges, duration, effect, durationType, targetType);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 itemId,
    uint256 charges,
    uint256 maxCharges,
    uint256 duration,
    EffectType effect,
    DurationType durationType,
    TargetType targetType
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(itemId, charges, maxCharges, duration, effect, durationType, targetType);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 id) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    return _keyTuple;
  }
}
