// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { DurationType, CurrencyType } from "../common.sol";

struct JobData {
  uint256 xpPerCycle;
  uint256 cycleTime;
  DurationType cycleTimeType;
  uint256 minLevel;
  uint256 cycleRewardAmount;
  CurrencyType cycleRewardCurrencyType;
  address cycleRewardCurrencyAddress;
  bool canAbort;
  uint256 skillXpPerCycle;
  uint256 skill;
}

library Job {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "Job", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746261707000000000000000000000004a6f6200000000000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x00d70a0020200120200114012020000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint256)
  Schema constant _keySchema = Schema.wrap(0x002001001f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint8, uint256, uint256, uint8, address, bool, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x00d70a001f1f001f1f0061601f1f000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "id";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](10);
    fieldNames[0] = "xpPerCycle";
    fieldNames[1] = "cycleTime";
    fieldNames[2] = "cycleTimeType";
    fieldNames[3] = "minLevel";
    fieldNames[4] = "cycleRewardAmount";
    fieldNames[5] = "cycleRewardCurrencyType";
    fieldNames[6] = "cycleRewardCurrencyAddress";
    fieldNames[7] = "canAbort";
    fieldNames[8] = "skillXpPerCycle";
    fieldNames[9] = "skill";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get xpPerCycle.
   */
  function getXpPerCycle(uint256 id) internal view returns (uint256 xpPerCycle) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get xpPerCycle.
   */
  function _getXpPerCycle(uint256 id) internal view returns (uint256 xpPerCycle) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set xpPerCycle.
   */
  function setXpPerCycle(uint256 id, uint256 xpPerCycle) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((xpPerCycle)), _fieldLayout);
  }

  /**
   * @notice Set xpPerCycle.
   */
  function _setXpPerCycle(uint256 id, uint256 xpPerCycle) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((xpPerCycle)), _fieldLayout);
  }

  /**
   * @notice Get cycleTime.
   */
  function getCycleTime(uint256 id) internal view returns (uint256 cycleTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get cycleTime.
   */
  function _getCycleTime(uint256 id) internal view returns (uint256 cycleTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set cycleTime.
   */
  function setCycleTime(uint256 id, uint256 cycleTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((cycleTime)), _fieldLayout);
  }

  /**
   * @notice Set cycleTime.
   */
  function _setCycleTime(uint256 id, uint256 cycleTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((cycleTime)), _fieldLayout);
  }

  /**
   * @notice Get cycleTimeType.
   */
  function getCycleTimeType(uint256 id) internal view returns (DurationType cycleTimeType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return DurationType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get cycleTimeType.
   */
  function _getCycleTimeType(uint256 id) internal view returns (DurationType cycleTimeType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return DurationType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set cycleTimeType.
   */
  function setCycleTimeType(uint256 id, DurationType cycleTimeType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(cycleTimeType)), _fieldLayout);
  }

  /**
   * @notice Set cycleTimeType.
   */
  function _setCycleTimeType(uint256 id, DurationType cycleTimeType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(cycleTimeType)), _fieldLayout);
  }

  /**
   * @notice Get minLevel.
   */
  function getMinLevel(uint256 id) internal view returns (uint256 minLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get minLevel.
   */
  function _getMinLevel(uint256 id) internal view returns (uint256 minLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set minLevel.
   */
  function setMinLevel(uint256 id, uint256 minLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((minLevel)), _fieldLayout);
  }

  /**
   * @notice Set minLevel.
   */
  function _setMinLevel(uint256 id, uint256 minLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((minLevel)), _fieldLayout);
  }

  /**
   * @notice Get cycleRewardAmount.
   */
  function getCycleRewardAmount(uint256 id) internal view returns (uint256 cycleRewardAmount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get cycleRewardAmount.
   */
  function _getCycleRewardAmount(uint256 id) internal view returns (uint256 cycleRewardAmount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set cycleRewardAmount.
   */
  function setCycleRewardAmount(uint256 id, uint256 cycleRewardAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((cycleRewardAmount)), _fieldLayout);
  }

  /**
   * @notice Set cycleRewardAmount.
   */
  function _setCycleRewardAmount(uint256 id, uint256 cycleRewardAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((cycleRewardAmount)), _fieldLayout);
  }

  /**
   * @notice Get cycleRewardCurrencyType.
   */
  function getCycleRewardCurrencyType(uint256 id) internal view returns (CurrencyType cycleRewardCurrencyType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return CurrencyType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get cycleRewardCurrencyType.
   */
  function _getCycleRewardCurrencyType(uint256 id) internal view returns (CurrencyType cycleRewardCurrencyType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return CurrencyType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set cycleRewardCurrencyType.
   */
  function setCycleRewardCurrencyType(uint256 id, CurrencyType cycleRewardCurrencyType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked(uint8(cycleRewardCurrencyType)), _fieldLayout);
  }

  /**
   * @notice Set cycleRewardCurrencyType.
   */
  function _setCycleRewardCurrencyType(uint256 id, CurrencyType cycleRewardCurrencyType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked(uint8(cycleRewardCurrencyType)), _fieldLayout);
  }

  /**
   * @notice Get cycleRewardCurrencyAddress.
   */
  function getCycleRewardCurrencyAddress(uint256 id) internal view returns (address cycleRewardCurrencyAddress) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get cycleRewardCurrencyAddress.
   */
  function _getCycleRewardCurrencyAddress(uint256 id) internal view returns (address cycleRewardCurrencyAddress) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set cycleRewardCurrencyAddress.
   */
  function setCycleRewardCurrencyAddress(uint256 id, address cycleRewardCurrencyAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((cycleRewardCurrencyAddress)), _fieldLayout);
  }

  /**
   * @notice Set cycleRewardCurrencyAddress.
   */
  function _setCycleRewardCurrencyAddress(uint256 id, address cycleRewardCurrencyAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((cycleRewardCurrencyAddress)), _fieldLayout);
  }

  /**
   * @notice Get canAbort.
   */
  function getCanAbort(uint256 id) internal view returns (bool canAbort) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get canAbort.
   */
  function _getCanAbort(uint256 id) internal view returns (bool canAbort) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set canAbort.
   */
  function setCanAbort(uint256 id, bool canAbort) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((canAbort)), _fieldLayout);
  }

  /**
   * @notice Set canAbort.
   */
  function _setCanAbort(uint256 id, bool canAbort) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((canAbort)), _fieldLayout);
  }

  /**
   * @notice Get skillXpPerCycle.
   */
  function getSkillXpPerCycle(uint256 id) internal view returns (uint256 skillXpPerCycle) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get skillXpPerCycle.
   */
  function _getSkillXpPerCycle(uint256 id) internal view returns (uint256 skillXpPerCycle) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set skillXpPerCycle.
   */
  function setSkillXpPerCycle(uint256 id, uint256 skillXpPerCycle) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((skillXpPerCycle)), _fieldLayout);
  }

  /**
   * @notice Set skillXpPerCycle.
   */
  function _setSkillXpPerCycle(uint256 id, uint256 skillXpPerCycle) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((skillXpPerCycle)), _fieldLayout);
  }

  /**
   * @notice Get skill.
   */
  function getSkill(uint256 id) internal view returns (uint256 skill) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get skill.
   */
  function _getSkill(uint256 id) internal view returns (uint256 skill) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set skill.
   */
  function setSkill(uint256 id, uint256 skill) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((skill)), _fieldLayout);
  }

  /**
   * @notice Set skill.
   */
  function _setSkill(uint256 id, uint256 skill) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((skill)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(uint256 id) internal view returns (JobData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint256 id) internal view returns (JobData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 id,
    uint256 xpPerCycle,
    uint256 cycleTime,
    DurationType cycleTimeType,
    uint256 minLevel,
    uint256 cycleRewardAmount,
    CurrencyType cycleRewardCurrencyType,
    address cycleRewardCurrencyAddress,
    bool canAbort,
    uint256 skillXpPerCycle,
    uint256 skill
  ) internal {
    bytes memory _staticData = encodeStatic(
      xpPerCycle,
      cycleTime,
      cycleTimeType,
      minLevel,
      cycleRewardAmount,
      cycleRewardCurrencyType,
      cycleRewardCurrencyAddress,
      canAbort,
      skillXpPerCycle,
      skill
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 id,
    uint256 xpPerCycle,
    uint256 cycleTime,
    DurationType cycleTimeType,
    uint256 minLevel,
    uint256 cycleRewardAmount,
    CurrencyType cycleRewardCurrencyType,
    address cycleRewardCurrencyAddress,
    bool canAbort,
    uint256 skillXpPerCycle,
    uint256 skill
  ) internal {
    bytes memory _staticData = encodeStatic(
      xpPerCycle,
      cycleTime,
      cycleTimeType,
      minLevel,
      cycleRewardAmount,
      cycleRewardCurrencyType,
      cycleRewardCurrencyAddress,
      canAbort,
      skillXpPerCycle,
      skill
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint256 id, JobData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.xpPerCycle,
      _table.cycleTime,
      _table.cycleTimeType,
      _table.minLevel,
      _table.cycleRewardAmount,
      _table.cycleRewardCurrencyType,
      _table.cycleRewardCurrencyAddress,
      _table.canAbort,
      _table.skillXpPerCycle,
      _table.skill
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint256 id, JobData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.xpPerCycle,
      _table.cycleTime,
      _table.cycleTimeType,
      _table.minLevel,
      _table.cycleRewardAmount,
      _table.cycleRewardCurrencyType,
      _table.cycleRewardCurrencyAddress,
      _table.canAbort,
      _table.skillXpPerCycle,
      _table.skill
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint256 xpPerCycle,
      uint256 cycleTime,
      DurationType cycleTimeType,
      uint256 minLevel,
      uint256 cycleRewardAmount,
      CurrencyType cycleRewardCurrencyType,
      address cycleRewardCurrencyAddress,
      bool canAbort,
      uint256 skillXpPerCycle,
      uint256 skill
    )
  {
    xpPerCycle = (uint256(Bytes.getBytes32(_blob, 0)));

    cycleTime = (uint256(Bytes.getBytes32(_blob, 32)));

    cycleTimeType = DurationType(uint8(Bytes.getBytes1(_blob, 64)));

    minLevel = (uint256(Bytes.getBytes32(_blob, 65)));

    cycleRewardAmount = (uint256(Bytes.getBytes32(_blob, 97)));

    cycleRewardCurrencyType = CurrencyType(uint8(Bytes.getBytes1(_blob, 129)));

    cycleRewardCurrencyAddress = (address(Bytes.getBytes20(_blob, 130)));

    canAbort = (_toBool(uint8(Bytes.getBytes1(_blob, 150))));

    skillXpPerCycle = (uint256(Bytes.getBytes32(_blob, 151)));

    skill = (uint256(Bytes.getBytes32(_blob, 183)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (JobData memory _table) {
    (
      _table.xpPerCycle,
      _table.cycleTime,
      _table.cycleTimeType,
      _table.minLevel,
      _table.cycleRewardAmount,
      _table.cycleRewardCurrencyType,
      _table.cycleRewardCurrencyAddress,
      _table.canAbort,
      _table.skillXpPerCycle,
      _table.skill
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 xpPerCycle,
    uint256 cycleTime,
    DurationType cycleTimeType,
    uint256 minLevel,
    uint256 cycleRewardAmount,
    CurrencyType cycleRewardCurrencyType,
    address cycleRewardCurrencyAddress,
    bool canAbort,
    uint256 skillXpPerCycle,
    uint256 skill
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        xpPerCycle,
        cycleTime,
        cycleTimeType,
        minLevel,
        cycleRewardAmount,
        cycleRewardCurrencyType,
        cycleRewardCurrencyAddress,
        canAbort,
        skillXpPerCycle,
        skill
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 xpPerCycle,
    uint256 cycleTime,
    DurationType cycleTimeType,
    uint256 minLevel,
    uint256 cycleRewardAmount,
    CurrencyType cycleRewardCurrencyType,
    address cycleRewardCurrencyAddress,
    bool canAbort,
    uint256 skillXpPerCycle,
    uint256 skill
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      xpPerCycle,
      cycleTime,
      cycleTimeType,
      minLevel,
      cycleRewardAmount,
      cycleRewardCurrencyType,
      cycleRewardCurrencyAddress,
      canAbort,
      skillXpPerCycle,
      skill
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 id) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
